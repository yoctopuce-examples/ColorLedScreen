using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Threading;

namespace Yocto_Color_V2_bitmap
{
    class ColorLedScreen
    {
        public enum Origin
        {
            TOP_LEFT,
            TOP_RIGHT,
            BOTTOM_RIGHT,
            BOTTOM_LEFT
        }

        private YColorLedCluster colorleds;

        //private int startOfs;
        private int nbleds;
        private int width;
        private List<int> ledStripe;
        private int height;


        public ColorLedScreen(YColorLedCluster colorLeds, int width, int height)
        {
            this.colorleds = colorLeds;
            this.nbleds = width * height;
            this.width = width;
            this.height = height;
            this.ledStripe = colorLeds.get_rgbColorArray(0, this.nbleds);
        }

        private int tranlaste_coordonate(int user_x, int user_y)
        {
            int tmp_x = user_x;
            int tmp_y = user_y;

            tmp_y = this.height - 1 - tmp_y;
            int ofs = tmp_x * this.height + tmp_y;
            return ofs;
        }


        private void updateBitmap(int x, int y, int[,] bitmap)
        {
            int ofs = 0;
            for (int i = 0; i < bitmap.GetLength(0); i++) {
                for (int j = 0; j < bitmap.GetLength(1); j++) {
                    int pixel_x = x + i;
                    int pixel_y = y + j;
                    if (pixel_x < 0 || pixel_x >= this.width)
                        continue;
                    if (pixel_y < 0 || pixel_y >= this.height)
                        continue;
                    int led_ofs = tranlaste_coordonate(pixel_x, pixel_y);
                    this.ledStripe[led_ofs] = bitmap[i, j];
                }
            }
        }


        public virtual int drawBitmapRGB(int x, int y, int[,] bitmap)

        {
            updateBitmap(x, y, bitmap);
            this.colorleds.set_rgbColorArray(0, this.ledStripe);
            return YAPI.SUCCESS;
        }

        public virtual int drawBitmapHSL(int x, int y, int[,] bitmap)

        {
            updateBitmap(x, y, bitmap);
            this.colorleds.set_hslColorArray(0, this.ledStripe);
            return YAPI.SUCCESS;
        }


        public int getHeight()
        {
            return width;
        }

        public int getWidth()
        {
            return width;
        }

        public void Clear()
        {
            this.colorleds.set_rgbColor(1, this.nbleds, 0);
        }
    }

    internal class YFM
    {
        private int last_ascii;
        private int height;
        private int baseline;
        private int first_ascii;
        private byte[] rawbytes;
        private int[] char_len;
        private int bitmapWidth;
        private byte[] bitmap;

        public YFM(byte[] rawBytes)
        {
            if (rawBytes[0] != 0x59 || rawBytes[1] != 0x46) {
                throw new Exception("Invalid font format (only YFM are supported)");
            }

            if (rawBytes[2] != 1 || rawBytes[3] != 1) {
                throw new Exception("Not supported font format");
            }

            MemoryStream stream = new MemoryStream(rawBytes);

            BinaryReader binaryReader = new BinaryReader(stream);
            binaryReader.ReadInt32();
            ushort bit_width = binaryReader.ReadUInt16();
            this.bitmapWidth = bit_width / 8;
            this.height = binaryReader.ReadByte();
            this.baseline = binaryReader.ReadByte();
            ;
            this.first_ascii = binaryReader.ReadByte();
            ;
            this.last_ascii = binaryReader.ReadByte();
            ;
            int nbchar = last_ascii - first_ascii + 1;
            this.rawbytes = rawBytes;
            this.char_len = new int[nbchar];
            for (int c = 0; c < nbchar; c++) {
                char_len[c] = binaryReader.ReadInt16();
            }

            this.bitmap = new byte[bitmapWidth * height];
            Array.Copy(rawBytes, 10 + nbchar * 2, bitmap, 0, bitmap.Length);
        }

        public int getCharLen(char c)
        {
            if (c < this.first_ascii || c > last_ascii) {
                Console.WriteLine("Unsuported char");
                return -1;
            }

            int char_ofs = c - first_ascii;
            int start_ofs;
            if (char_ofs == 0) {
                start_ofs = 0;
            } else {
                start_ofs = char_len[char_ofs - 1] + 1;
            }

            return char_len[char_ofs] - start_ofs + 1;
        }


        public int[,] getCharBitmap(char c, int rgb_color)
        {
            if (c < this.first_ascii || c > last_ascii) {
                Console.WriteLine("Unsuported char");
                return null;
            }

            int char_ofs = c - first_ascii;
            int start_ofs;
            if (char_ofs == 0) {
                start_ofs = 0;
            } else {
                start_ofs = char_len[char_ofs - 1] + 1;
            }

            int charWidth = char_len[char_ofs] - start_ofs + 1;
            int[,] charBitmap = new int[charWidth, height];
            int start_pos = start_ofs / 8;
            int star_skip = start_ofs % 8;

            for (int h = 0; h < height; h++) {
                long pos = h * bitmapWidth + start_pos;
                int skip = star_skip;
                for (int pixel = 0; pixel < charWidth; pixel++) {
                    byte dat = bitmap[pos];
                    int mask = (1 << (7 - skip));

                    if ((dat & mask) != 0) {
                        charBitmap[pixel, h] = rgb_color;
                    } else {
                        charBitmap[pixel, h] = 0;
                    }

                    skip++;
                    if (skip == 8) {
                        skip = 0;
                        pos++;
                    }
                }
            }

            return charBitmap;
        }

        public int getHeight()
        {
            return this.height;
        }
    }


    class Program
    {
        static byte[] font_8x8 = new byte[] {0x59, 0x46, 0x01, 0x01, 0x00, 0x03, 0x08, 0x01, 0x20, 0x7F, 0x07, 0x00, 0x0F, 0x00, 0x17, 0x00, 0x1F, 0x00, 0x27, 0x00, 0x2F, 0x00, 0x37, 0x00, 0x3F, 0x00, 0x47, 0x00, 0x4F, 0x00, 0x57, 0x00, 0x5F, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x7F, 0x00, 0x87, 0x00, 0x8F, 0x00, 0x97, 0x00, 0x9F, 0x00, 0xA7, 0x00, 0xAF, 0x00, 0xB7, 0x00, 0xBF, 0x00, 0xC7, 0x00, 0xCF, 0x00, 0xD7, 0x00, 0xDF, 0x00, 0xE7, 0x00, 0xEF, 0x00, 0xF7, 0x00, 0xFF, 0x00, 0x07, 0x01, 0x0F, 0x01, 0x17, 0x01, 0x1F, 0x01, 0x27, 0x01, 0x2F, 0x01, 0x37, 0x01, 0x3F, 0x01, 0x47, 0x01, 0x4F, 0x01, 0x57, 0x01, 0x5F, 0x01, 0x67, 0x01, 0x6F, 0x01, 0x77, 0x01, 0x7F, 0x01, 0x87, 0x01, 0x8F, 0x01, 0x97, 0x01, 0x9F, 0x01, 0xA7, 0x01, 0xAF, 0x01, 0xB7, 0x01, 0xBF, 0x01, 0xC7, 0x01, 0xCF, 0x01, 0xD7, 0x01, 0xDF, 0x01, 0xE7, 0x01, 0xEF, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0x07, 0x02, 0x0F, 0x02, 0x17, 0x02, 0x1F, 0x02, 0x27, 0x02, 0x2F, 0x02, 0x37, 0x02, 0x3F, 0x02, 0x47, 0x02, 0x4F, 0x02, 0x57, 0x02, 0x5F, 0x02, 0x67, 0x02, 0x6F, 0x02, 0x77, 0x02, 0x7F, 0x02, 0x87, 0x02, 0x8F, 0x02, 0x97, 0x02, 0x9F, 0x02, 0xA7, 0x02, 0xAF, 0x02, 0xB7, 0x02, 0xBF, 0x02, 0xC7, 0x02, 0xCF, 0x02, 0xD7, 0x02, 0xDF, 0x02, 0xE7, 0x02, 0xEF, 0x02, 0xF7, 0x02, 0xFF, 0x02, 0x00, 0x10, 0x28, 0x28, 0x10, 0x00, 0x30, 0x10, 0x08, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, 0x02, 0x38, 0x10, 0x38, 0x38, 0x18, 0x7C, 0x38, 0x7C, 0x38, 0x38, 0x00, 0x00, 0x08, 0x00, 0x40, 0x38, 0x38, 0x38, 0x78, 0x38, 0x78, 0x7C, 0x7C, 0x38, 0x44, 0x38, 0x1C, 0x44, 0x20, 0x82, 0x44, 0x38, 0x38, 0x38, 0x78, 0x38, 0x7C, 0x44, 0x44, 0x82, 0x44, 0x44, 0x7C, 0x38, 0x80, 0x38, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00, 0x04, 0x00, 0x18, 0x00, 0x40, 0x00, 0x00, 0x40, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0x60, 0x00, 0x7E, 0x00, 0x10, 0x28, 0x28, 0x3C, 0x64, 0x50, 0x10, 0x10, 0x10, 0x92, 0x10, 0x00, 0x00, 0x00, 0x04, 0x44, 0x30, 0x44, 0x44, 0x28, 0x40, 0x44, 0x04, 0x44, 0x44, 0x18, 0x18, 0x10, 0x00, 0x20, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x40, 0x40, 0x44, 0x44, 0x10, 0x08, 0x44, 0x20, 0xC6, 0x64, 0x44, 0x24, 0x44, 0x44, 0x44, 0x10, 0x44, 0x44, 0x82, 0x44, 0x44, 0x04, 0x20, 0x40, 0x08, 0x28, 0x00, 0x10, 0x38, 0x20, 0x00, 0x04, 0x00, 0x24, 0x00, 0x40, 0x10, 0x10, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x10, 0x00, 0x7E, 0x00, 0x10, 0x00, 0xFE, 0x50, 0x68, 0x20, 0x00, 0x20, 0x08, 0x54, 0x10, 0x00, 0x00, 0x00, 0x08, 0x44, 0x10, 0x04, 0x04, 0x48, 0x40, 0x40, 0x08, 0x44, 0x44, 0x18, 0x18, 0x20, 0xFE, 0x10, 0x04, 0x5C, 0x44, 0x44, 0x40, 0x44, 0x40, 0x40, 0x40, 0x44, 0x10, 0x08, 0x48, 0x20, 0xAA, 0x54, 0x44, 0x24, 0x44, 0x44, 0x40, 0x10, 0x44, 0x44, 0x82, 0x28, 0x28, 0x08, 0x20, 0x20, 0x08, 0x44, 0x00, 0x00, 0x04, 0x38, 0x38, 0x1C, 0x38, 0x20, 0x3A, 0x58, 0x00, 0x00, 0x48, 0x10, 0xB6, 0x58, 0x38, 0x58, 0x34, 0x58, 0x38, 0x38, 0x48, 0x44, 0x82, 0x44, 0x24, 0x78, 0x20, 0x10, 0x10, 0x60, 0x7E, 0x00, 0x10, 0x00, 0x28, 0x38, 0x10, 0x50, 0x00, 0x20, 0x08, 0x38, 0xFE, 0x00, 0xFE, 0x00, 0x10, 0x54, 0x10, 0x08, 0x18, 0x7C, 0x78, 0x78, 0x10, 0x38, 0x3C, 0x00, 0x00, 0x40, 0x00, 0x08, 0x08, 0x54, 0x7C, 0x78, 0x40, 0x44, 0x78, 0x7C, 0x5C, 0x7C, 0x10, 0x08, 0x70, 0x20, 0x92, 0x54, 0x44, 0x38, 0x44, 0x78, 0x38, 0x10, 0x44, 0x28, 0x54, 0x10, 0x10, 0x10, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x3C, 0x24, 0x40, 0x24, 0x44, 0x70, 0x44, 0x64, 0x10, 0x10, 0x50, 0x10, 0x49, 0x24, 0x44, 0x24, 0x48, 0x60, 0x40, 0x10, 0x48, 0x44, 0x82, 0x28, 0x24, 0x08, 0x40, 0x10, 0x08, 0x92, 0x7E, 0x00, 0x10, 0x00, 0xFE, 0x14, 0x2C, 0x8C, 0x00, 0x20, 0x08, 0x54, 0x10, 0x18, 0x00, 0x00, 0x20, 0x44, 0x10, 0x10, 0x04, 0x08, 0x04, 0x44, 0x20, 0x44, 0x04, 0x18, 0x18, 0x20, 0xFE, 0x10, 0x10, 0x5C, 0x44, 0x44, 0x40, 0x44, 0x40, 0x40, 0x44, 0x44, 0x10, 0x48, 0x48, 0x20, 0x82, 0x4C, 0x44, 0x20, 0x44, 0x50, 0x04, 0x10, 0x44, 0x28, 0x54, 0x28, 0x10, 0x20, 0x20, 0x08, 0x08, 0x00, 0x00, 0x00, 0x44, 0x24, 0x40, 0x24, 0x7C, 0x20, 0x44, 0x44, 0x10, 0x10, 0x60, 0x10, 0x49, 0x24, 0x44, 0x24, 0x48, 0x40, 0x30, 0x10, 0x48, 0x44, 0x92, 0x10, 0x24, 0x10, 0x20, 0x10, 0x10, 0x0C, 0x7E, 0x00, 0x00, 0x00, 0x28, 0x78, 0x4C, 0x88, 0x00, 0x10, 0x10, 0x92, 0x10, 0x18, 0x00, 0x18, 0x40, 0x44, 0x10, 0x20, 0x44, 0x08, 0x44, 0x44, 0x20, 0x44, 0x44, 0x18, 0x18, 0x10, 0x00, 0x20, 0x00, 0x40, 0x44, 0x44, 0x44, 0x44, 0x40, 0x40, 0x44, 0x44, 0x10, 0x48, 0x44, 0x20, 0x82, 0x44, 0x44, 0x20, 0x44, 0x48, 0x44, 0x10, 0x44, 0x10, 0x28, 0x44, 0x10, 0x40, 0x20, 0x04, 0x08, 0x00, 0x00, 0x00, 0x44, 0x24, 0x40, 0x24, 0x40, 0x20, 0x3C, 0x44, 0x10, 0x10, 0x50, 0x10, 0x41, 0x24, 0x44, 0x38, 0x38, 0x40, 0x08, 0x10, 0x48, 0x28, 0xAA, 0x28, 0x1C, 0x20, 0x20, 0x10, 0x10, 0x00, 0x7E, 0x00, 0x10, 0x00, 0x28, 0x10, 0x00, 0x74, 0x00, 0x08, 0x20, 0x10, 0x10, 0x08, 0x00, 0x18, 0x80, 0x38, 0x38, 0x7C, 0x38, 0x1C, 0x38, 0x38, 0x20, 0x38, 0x38, 0x00, 0x08, 0x08, 0x00, 0x40, 0x10, 0x38, 0x44, 0x78, 0x38, 0x78, 0x7C, 0x40, 0x38, 0x44, 0x38, 0x30, 0x44, 0x3C, 0x82, 0x44, 0x38, 0x20, 0x38, 0x44, 0x38, 0x10, 0x38, 0x10, 0x28, 0x44, 0x10, 0x7C, 0x38, 0x02, 0x38, 0x00, 0x00, 0x00, 0x3A, 0x58, 0x38, 0x1A, 0x38, 0x20, 0x04, 0x44, 0x10, 0x10, 0x48, 0x10, 0x41, 0x24, 0x38, 0x20, 0x08, 0x40, 0x70, 0x10, 0x34, 0x10, 0x44, 0x44, 0x04, 0x78, 0x18, 0x10, 0x60, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E};

        //static byte[] font_8x8 = new byte[] {0x59, 0x46, 0x01, 0x01, 0x30, 0x00, 0x06, 0x01, 0x30, 0x39, 0x03, 0x00, 0x05, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x11, 0x00, 0x15, 0x00, 0x19, 0x00, 0x1d, 0x00, 0x21, 0x00, 0x25, 0x00, 0xeb, 0xba, 0x3b, 0xbb, 0xb8, 0x00, 0xa8, 0x8a, 0x22, 0x0a, 0xa8, 0x00, 0xab, 0xba, 0xbb, 0x8b, 0xb8, 0x00, 0xaa, 0x0b, 0x8a, 0x8a, 0x88, 0x00, 0xeb, 0xb8, 0xbb, 0x8b, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        static byte[] font_small = new byte[] {0x59, 0x46, 0x01, 0x01, 0x20, 0x03, 0x08, 0x01, 0x20, 0xFF, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0D, 0x00, 0x11, 0x00, 0x15, 0x00, 0x1A, 0x00, 0x1C, 0x00, 0x1F, 0x00, 0x22, 0x00, 0x26, 0x00, 0x2A, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x33, 0x00, 0x37, 0x00, 0x3B, 0x00, 0x3D, 0x00, 0x41, 0x00, 0x45, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x51, 0x00, 0x55, 0x00, 0x59, 0x00, 0x5D, 0x00, 0x5F, 0x00, 0x62, 0x00, 0x66, 0x00, 0x6A, 0x00, 0x6E, 0x00, 0x72, 0x00, 0x77, 0x00, 0x7B, 0x00, 0x7F, 0x00, 0x83, 0x00, 0x87, 0x00, 0x8B, 0x00, 0x8F, 0x00, 0x93, 0x00, 0x97, 0x00, 0x99, 0x00, 0x9D, 0x00, 0xA1, 0x00, 0xA5, 0x00, 0xAB, 0x00, 0xB0, 0x00, 0xB4, 0x00, 0xB8, 0x00, 0xBC, 0x00, 0xC0, 0x00, 0xC4, 0x00, 0xC8, 0x00, 0xCC, 0x00, 0xD0, 0x00, 0xD6, 0x00, 0xDA, 0x00, 0xDE, 0x00, 0xE2, 0x00, 0xE5, 0x00, 0xE9, 0x00, 0xEC, 0x00, 0xF0, 0x00, 0xF4, 0x00, 0xF7, 0x00, 0xFB, 0x00, 0xFF, 0x00, 0x03, 0x01, 0x07, 0x01, 0x0B, 0x01, 0x0F, 0x01, 0x13, 0x01, 0x17, 0x01, 0x19, 0x01, 0x1C, 0x01, 0x20, 0x01, 0x22, 0x01, 0x28, 0x01, 0x2C, 0x01, 0x30, 0x01, 0x34, 0x01, 0x38, 0x01, 0x3B, 0x01, 0x3F, 0x01, 0x43, 0x01, 0x47, 0x01, 0x4B, 0x01, 0x51, 0x01, 0x55, 0x01, 0x59, 0x01, 0x5D, 0x01, 0x61, 0x01, 0x63, 0x01, 0x67, 0x01, 0x6D, 0x01, 0x6E, 0x01, 0x6F, 0x01, 0x70, 0x01, 0x71, 0x01, 0x72, 0x01, 0x73, 0x01, 0x74, 0x01, 0x75, 0x01, 0x76, 0x01, 0x77, 0x01, 0x78, 0x01, 0x79, 0x01, 0x7A, 0x01, 0x7B, 0x01, 0x7C, 0x01, 0x7D, 0x01, 0x7E, 0x01, 0x7F, 0x01, 0x80, 0x01, 0x81, 0x01, 0x82, 0x01, 0x83, 0x01, 0x84, 0x01, 0x85, 0x01, 0x86, 0x01, 0x87, 0x01, 0x88, 0x01, 0x89, 0x01, 0x8A, 0x01, 0x8B, 0x01, 0x8C, 0x01, 0x8D, 0x01, 0x8E, 0x01, 0x8F, 0x01, 0x91, 0x01, 0x95, 0x01, 0x9A, 0x01, 0x9F, 0x01, 0xA3, 0x01, 0xA5, 0x01, 0xA9, 0x01, 0xAD, 0x01, 0xB4, 0x01, 0xB5, 0x01, 0xBB, 0x01, 0xC0, 0x01, 0xC3, 0x01, 0xCA, 0x01, 0xCF, 0x01, 0xD3, 0x01, 0xD7, 0x01, 0xDA, 0x01, 0xDD, 0x01, 0xE0, 0x01, 0xE4, 0x01, 0xE9, 0x01, 0xEA, 0x01, 0xEB, 0x01, 0xEE, 0x01, 0xF2, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0x06, 0x02, 0x0E, 0x02, 0x12, 0x02, 0x16, 0x02, 0x1A, 0x02, 0x1E, 0x02, 0x22, 0x02, 0x26, 0x02, 0x2A, 0x02, 0x30, 0x02, 0x34, 0x02, 0x38, 0x02, 0x3C, 0x02, 0x40, 0x02, 0x44, 0x02, 0x46, 0x02, 0x48, 0x02, 0x4A, 0x02, 0x4D, 0x02, 0x51, 0x02, 0x56, 0x02, 0x5A, 0x02, 0x5E, 0x02, 0x62, 0x02, 0x66, 0x02, 0x6A, 0x02, 0x6E, 0x02, 0x72, 0x02, 0x76, 0x02, 0x7A, 0x02, 0x7E, 0x02, 0x82, 0x02, 0x86, 0x02, 0x8A, 0x02, 0x8E, 0x02, 0x92, 0x02, 0x96, 0x02, 0x9A, 0x02, 0x9E, 0x02, 0xA2, 0x02, 0xA6, 0x02, 0xAD, 0x02, 0xB1, 0x02, 0xB5, 0x02, 0xB9, 0x02, 0xBD, 0x02, 0xC1, 0x02, 0xC4, 0x02, 0xC7, 0x02, 0xCB, 0x02, 0xCF, 0x02, 0xD3, 0x02, 0xD7, 0x02, 0xDB, 0x02, 0xDF, 0x02, 0xE3, 0x02, 0xE7, 0x02, 0xEB, 0x02, 0xEF, 0x02, 0xF4, 0x02, 0xF8, 0x02, 0xFC, 0x02, 0x00, 0x03, 0x04, 0x03, 0x08, 0x03, 0x0C, 0x03, 0x10, 0x03, 0x15, 0x31, 0x29, 0x12, 0x80, 0x00, 0x00, 0xEB, 0xB8, 0xBB, 0xBB, 0xB8, 0x00, 0x00, 0x8C, 0x4C, 0x6C, 0xEE, 0x6A, 0x8A, 0xA2, 0x29, 0x77, 0x76, 0x77, 0x55, 0x55, 0x55, 0xDA, 0x32, 0x04, 0x08, 0x02, 0x02, 0x08, 0x94, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x81, 0x80, 0x88, 0x88, 0x88, 0x88, 0x37, 0x77, 0x75, 0x4B, 0x25, 0xDD, 0xDD, 0xC1, 0xD5, 0x55, 0x54, 0x19, 0x08, 0x9D, 0x48, 0x00, 0x11, 0x12, 0xA2, 0x4A, 0xEC, 0x44, 0x4E, 0xA0, 0x02, 0x12, 0x52, 0x05, 0x00, 0x00, 0x15, 0x33, 0x8A, 0x94, 0x40, 0x00, 0x02, 0xAA, 0xA9, 0xAA, 0xAA, 0xA8, 0x04, 0x11, 0x52, 0xEA, 0x8A, 0x88, 0x8A, 0x8A, 0xA2, 0x29, 0x55, 0x55, 0x52, 0x55, 0x55, 0x54, 0x52, 0x15, 0x02, 0x08, 0x02, 0x04, 0x08, 0x04, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xA3, 0x81, 0xE0, 0x00, 0x07, 0x80, 0xE0, 0xD9, 0x00, 0x04, 0x00, 0x40, 0x80, 0x80, 0x1D, 0xDD, 0xDD, 0xDF, 0x44, 0x44, 0x45, 0x4A, 0xA5, 0x55, 0x55, 0x41, 0x55, 0x55, 0x54, 0x14, 0x91, 0x40, 0x00, 0x00, 0x0A, 0x28, 0x14, 0xA0, 0x00, 0x28, 0xA0, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7A, 0x12, 0x94, 0x54, 0x80, 0x02, 0xA8, 0x8A, 0xA2, 0x0A, 0xAA, 0x08, 0x08, 0x52, 0xAA, 0x8A, 0x88, 0x8A, 0x8A, 0xA3, 0x6D, 0x55, 0x55, 0x42, 0x55, 0x54, 0x9C, 0x51, 0x10, 0x00, 0xCC, 0x66, 0x4E, 0x6C, 0x94, 0x5A, 0x62, 0x63, 0x26, 0xEA, 0xAA, 0xAA, 0xB9, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x91, 0x12, 0xEA, 0x2A, 0x10, 0x00, 0x08, 0x40, 0xA4, 0x5A, 0x53, 0x8D, 0xC0, 0x48, 0x91, 0x90, 0x95, 0x55, 0x55, 0x54, 0x44, 0x44, 0x45, 0x4A, 0xB5, 0x55, 0x55, 0x41, 0x55, 0x55, 0x5D, 0x15, 0x99, 0x99, 0x99, 0xB9, 0x91, 0x11, 0x22, 0x44, 0x4C, 0x44, 0x44, 0x44, 0x15, 0x55, 0x55, 0x45, 0x00, 0x00, 0x10, 0x31, 0x13, 0x84, 0x49, 0xC3, 0x84, 0xA9, 0x1A, 0xBB, 0x8B, 0xB8, 0x11, 0xC4, 0x96, 0xAE, 0x8A, 0xCC, 0xAE, 0x8B, 0x23, 0x6D, 0x57, 0x56, 0x22, 0x55, 0x54, 0x88, 0x91, 0x10, 0x00, 0x2A, 0x8A, 0xA4, 0xAA, 0x95, 0x55, 0x55, 0x55, 0x48, 0x4A, 0xAA, 0xAA, 0x8A, 0x26, 0xA8, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x8C, 0x4B, 0x82, 0xD1, 0x20, 0x0B, 0x40, 0xEE, 0x88, 0x54, 0x85, 0x52, 0x52, 0xAC, 0xA4, 0x95, 0x55, 0x55, 0x54, 0x46, 0x66, 0x65, 0x4A, 0xB5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x49, 0x9C, 0x44, 0x44, 0x44, 0x6A, 0x2A, 0xAA, 0xA2, 0x44, 0xAA, 0xAA, 0xAA, 0xA0, 0x65, 0x55, 0x55, 0x75, 0x00, 0x00, 0x10, 0x78, 0x91, 0x44, 0x54, 0x80, 0x04, 0xAA, 0x0B, 0x8A, 0x92, 0x8A, 0x48, 0x08, 0x96, 0xEA, 0x8A, 0x88, 0xAA, 0x8B, 0x22, 0xAB, 0x54, 0x55, 0x12, 0x55, 0x54, 0x88, 0x91, 0x10, 0x00, 0x6A, 0x8A, 0xE4, 0xAA, 0x96, 0x55, 0x55, 0x55, 0x44, 0x4A, 0xAA, 0x92, 0x91, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x0C, 0xE2, 0x82, 0x92, 0x4F, 0x6B, 0x40, 0x04, 0xD8, 0x53, 0x85, 0xC9, 0x56, 0xA5, 0xED, 0x1D, 0xDD, 0xDD, 0xDE, 0x44, 0x44, 0x45, 0x4A, 0xAD, 0x55, 0x55, 0x49, 0x55, 0x55, 0x49, 0x54, 0xCC, 0xCC, 0xCC, 0xFA, 0x3B, 0xBB, 0xA2, 0x44, 0xAA, 0xAA, 0xAA, 0xAE, 0xB5, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x33, 0xA3, 0x44, 0x40, 0x00, 0x08, 0xAA, 0xA8, 0xAA, 0x92, 0xA8, 0x05, 0xD0, 0x10, 0xAA, 0x8A, 0x88, 0xAA, 0xAA, 0xA2, 0xAB, 0x54, 0x55, 0x52, 0x55, 0x7D, 0x49, 0x10, 0x90, 0x00, 0xAA, 0x8A, 0x84, 0x6A, 0x96, 0x55, 0x55, 0x55, 0x42, 0x4A, 0xEA, 0xAB, 0xA1, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x12, 0x43, 0x82, 0xD1, 0x21, 0x0B, 0x40, 0x00, 0x00, 0x51, 0x80, 0x12, 0x2A, 0x4C, 0x55, 0x55, 0x55, 0x55, 0x54, 0x44, 0x44, 0x45, 0x4A, 0xAD, 0x55, 0x55, 0x55, 0x55, 0x55, 0x49, 0x95, 0x55, 0x55, 0x55, 0x22, 0x22, 0x22, 0x22, 0x44, 0xAA, 0xAA, 0xAA, 0xA0, 0xD5, 0x55, 0x57, 0x57, 0x00, 0x00, 0x10, 0x31, 0x2B, 0xC2, 0x80, 0x08, 0x28, 0xEB, 0xB8, 0xBB, 0x93, 0xB8, 0x40, 0x00, 0x8E, 0xAC, 0x6C, 0xE8, 0x6A, 0xBA, 0xBA, 0x29, 0x74, 0x75, 0x72, 0x72, 0x29, 0x49, 0xD8, 0xB0, 0x00, 0x6C, 0x66, 0x64, 0x2A, 0x95, 0x55, 0x52, 0x63, 0x4C, 0x6E, 0x45, 0x28, 0xB9, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xC0, 0x48, 0x82, 0x10, 0x01, 0x08, 0x40, 0x0E, 0x00, 0x71, 0x80, 0x00, 0x2E, 0x88, 0x9C, 0x95, 0x55, 0x55, 0x57, 0x37, 0x77, 0x75, 0x4B, 0x25, 0xDD, 0xDD, 0xC1, 0xDD, 0xDD, 0xC9, 0x18, 0xCC, 0xCC, 0xCC, 0xF9, 0x99, 0x99, 0xA2, 0x44, 0x4A, 0x44, 0x44, 0x44, 0x67, 0x77, 0x71, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0B, 0x81, 0xE0, 0x00, 0x07, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x02, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x07, 0x47, 0x00, 0x00};

        static void Main(string[] args)
        {
            string errmsg = "";
            string url = "usb";
            if (YAPI.RegisterHub(url, ref errmsg) != YAPI.SUCCESS) {
                Console.WriteLine("Unable to register hub with url " + url + " :" + errmsg);
                return;
            }

            YColorLedCluster colorLedCluster = YColorLedCluster.FirstColorLedCluster();
            if (colorLedCluster == null) {
                Console.WriteLine("No Yocto-Color-V2 is connected on hub " + url);
                return;
            }

            int w = 16;
            int h = 8;
            ColorLedScreen colorLedScreen = new ColorLedScreen(colorLedCluster, w, h);
            colorLedScreen.Clear();
            StaticGradient(w, h, colorLedScreen);
            Thread.Sleep(5000);
            colorLedScreen.Clear();
            AnnimatedGradient(w, h, colorLedScreen);
            Thread.Sleep(5000);
            colorLedScreen.Clear();
            Mandelbrot(w, h, colorLedScreen);
            Thread.Sleep(5000);
            colorLedScreen.Clear();
            TextBanner(w, h, colorLedScreen);
            colorLedCluster.rgb_move(0, 129, 0, 2000);
            Thread.Sleep(2000);
            //Benchmark(w, h, colorLedScreen);

            YAPI.FreeAPI();
        }

        private static void StaticGradient(int w, int h, ColorLedScreen colorLedScreen)
        {
            /*
             * Draw a gradien on the two 8x8 pannel
             */
            int[,] bitmap = new int[w, h];

            for (int j = 0; j < h; j++) {
                for (int i = 0; i < w; i++) {
                    int r = i * 255 / w;
                    int g = j * 255 / h;
                    bitmap[i, j] = (r << 16) + (g << 8);
                }
            }

            colorLedScreen.drawBitmapRGB(0, 0, bitmap);
        }

        static void AnnimatedGradient(int w, int h, ColorLedScreen colorLedScreen)
        {
            int[,] bitmap = new int[w, h];
            for (int b = 0; b < 255; b++) {
                for (int j = 0; j < h; j++) {
                    for (int i = 0; i < w; i++) {
                        int r = i * 255 / w;
                        int g = j * 255 / h;
                        bitmap[i, j] = (r << 16) + (g << 8) + b;
                    }
                }

                colorLedScreen.drawBitmapRGB(0, 0, bitmap);
            }
        }

        static void Mandelbrot(int w, int h, ColorLedScreen colorLedScreen)
        {
            int max_iteration = 50;
            int iteration;
            double xtemp;
            double centerX = 0;
            double centerY = 0;
            double targetX = 0.834555980181972;
            double targetY = 0.204552998862566;
            double x, y, x0, y0;
            double zoom = 1;
            double distance = 1;


            int[,] data = new int[w, h];

            for (int run = 0; run < 700; run++) {
                //for (int i = 0; i < data.Length; i++) data[i] = 0;
                distance = distance * 0.95;
                centerX = targetX * (1 - distance);
                centerY = targetY * (1 - distance);
                max_iteration = (int) Math.Round(max_iteration + Math.Sqrt(zoom));
                if (max_iteration > 1500) max_iteration = 1500;
                for (int j = 0; j < h; j++) {
                    for (int i = 0; i < w; i++) {
                        x0 = (((i - w / 2.0) / (w / 8)) / zoom) - centerX;
                        y0 = (((j - h / 2.0) / (w / 8)) / zoom) - centerY;

                        x = 0;
                        y = 0;

                        iteration = 0;

                        while ((x * x + y * y < 4) && (iteration < max_iteration)) {
                            xtemp = x * x - y * y + x0;
                            y = 2 * x * y + y0;
                            x = xtemp;
                            iteration += 1;
                        }

                        int hue = (255 * iteration / max_iteration);
                        int lum = iteration < max_iteration ? 50 : 0;
                        data[i, j] = (hue << 16) + 0xff00 + lum;
                    }
                }

                colorLedScreen.drawBitmapHSL(0, 0, data);
                zoom = zoom / 0.95;
            }
        }


        static void TextBanner(int w, int h, ColorLedScreen colorLedScreen)
        {
            string text = "0:00:00";
            YFM font = new YFM(font_small);
            int textlen = 1;
            int start_x;
            for (int i = 0; i < 10; i++) {
                for (start_x = w; start_x > -(textlen); start_x--) {
                    text = DateTime.Now.ToString("HH:mm:ss");
                    textlen=DrawText(colorLedScreen, text, font, start_x, 0, 0xff0000);
                    Thread.Sleep(20);
                }

                for (; start_x < w; start_x++) {
                    text = DateTime.Now.ToString("HH:mm:ss");
                    textlen = DrawText(colorLedScreen, text, font, start_x, 0, 0xff0000);
                    Thread.Sleep(20);
                }
            }
        }

        private static int DrawText(ColorLedScreen colorLedScreen, string text, YFM font, int x_pos, int y_pos, int color)
        {
            //colorLedScreen.Clear();
            int pixel_width = 1;
            for (int i = 0; i < text.Length; i++) {
                pixel_width += font.getCharLen(text[i]);
            }

            int[,] textBitmap = new int[pixel_width, font.getHeight()];
            int ofs = 1;
            for (int i = 0; i < text.Length; i++) {
                int[,] charbitmap = font.getCharBitmap(text[i], color);
                for (int a = 0; a < charbitmap.GetLength(0); a++) {
                    for (int b = 0; b < charbitmap.GetLength(1); b++) {
                        textBitmap[ofs + a, b] = charbitmap[a, b];
                    }
                }

                ofs += charbitmap.GetLength(0);
            }

            colorLedScreen.drawBitmapRGB(x_pos, y_pos, textBitmap);
            return pixel_width;
        }


        static void Benchmark(int w, int h, ColorLedScreen colorLedScreen)
        {
            int[,] bitmap_r = new int[w, h];
            int[,] bitmap_g = new int[w, h];
            int[,] bitmap_b = new int[w, h];

            for (int j = 0; j < h; j++) {
                for (int i = 0; i < w; i++) {
                    bitmap_r[i, j] = 0xf0000;
                    bitmap_g[i, j] = 0xf00;
                    bitmap_b[i, j] = 0xf;
                }
            }

            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int i = 0; i < 100; i++) {
                colorLedScreen.drawBitmapRGB(0, 0, bitmap_r);
                colorLedScreen.drawBitmapRGB(0, 0, bitmap_g);
                colorLedScreen.drawBitmapRGB(0, 0, bitmap_b);
            }

            sw.Stop();
            Console.WriteLine("frame refresh took {0}ms", sw.ElapsedMilliseconds / 300.0);
        }
    }
}